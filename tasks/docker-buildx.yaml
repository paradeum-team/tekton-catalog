apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: docker-buildx
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: docker, build-image, push-image, dind, buildx, multi-arch
    tekton.dev/displayName: docker-buildx
spec:
  description: >-
    This task will build and push an image using docker buildx.
    The task will build an out image out of a Dockerfile.
    This image will be pushed to an image registry.
    The image will be built and pushed using a dind sidecar over TCP+TLS.    
  params:
  - name: image_repository
  - name: image_tag
  - name: builder_image
    description: The location of the docker builder image.
    default: docker:20.10
  - name: docker_dind_image
    default: docker:20.10-dind
  - name: dockerfile
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: context
    description: Path to the directory to use as context.
    default: .
  - name: build_extra_args
    description: Extra parameters passed for the build command when building images.
    default: "--platform linux/amd64,linux/arm64"
  - name: push_extra_args
    description: Extra parameters passed for the push command when pushing images.
    default: "--push"
  - name: insecure_registry
    description: Allows the user to push to an insecure registry that has been specified
    default: ""
  workspaces:
  - name: source
  - name: cache
    optional: true
  - name: dockerconfig
    description: Includes a docker `config.json`
    optional: true
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  steps:
  - name: buildx-build-push
    image: $(params.builder_image)
    env:
    # Connect to the sidecar over TCP, with TLS.
    - name: DOCKER_HOST
      value: tcp://localhost:2376
    # Verify TLS.
    - name: DOCKER_TLS_VERIFY
      value: '1'
    # Use the certs generated by the sidecar daemon.
    - name: DOCKER_CERT_PATH
      value: /certs/client
    workingDir: $(workspaces.source.path)
    script: |
      # install depends
      apk add curl jq

      mkdir -p ~/.docker
      ln -s $(workspaces.dockerconfig.path)/config.json  ~/.docker/config.json

      # enable experimental buildx features
      export DOCKER_BUILDKIT=1
      export DOCKER_CLI_EXPERIMENTAL=enabled

      # Get and run the latest docker/binfmt tag to use its qemu parts
      BINFMT_IMAGE_TAG=$(curl -s https://registry.hub.docker.com/v2/repositories/docker/binfmt/tags | jq '.results | sort_by(.last_updated)[-1].name' -r)
      docker run --rm --privileged docker/binfmt:${BINFMT_IMAGE_TAG}

      docker context create tls-environment
      # create the multibuilder
      docker buildx create --name multibuilder --use tls-environment
      docker buildx use multibuilder

      VERSION=`cat version`
      echo ----- VERSION: $VERSION -----
      echo -n "$VERSION" > VERSION

      echo "Dockerfile:"
      cat Dockerfile
      echo

      # build the containers and push them to the registry then display the images
      docker buildx build \
          $(params.build_extra_args) \
          --cache-from type=local,src=$(workspaces.cache.path) \
          --cache-to type=local,dest=$(workspaces.cache.path) \
          -f $(params.dockerfile) -t $(params.image_repository):$(params.image_tag) $(params.context) $(params.push_extra_args)      

    volumeMounts:
      - mountPath: /certs/client
        name: dind-certs
  sidecars:
  - image: $(params.docker_dind_image)
    name: server
    args:
      - --storage-driver=vfs
      - --userland-proxy=false
      - --mtu=1400
      - --debug
    securityContext:
      privileged: true
    env:
    # Write generated certs to the path shared with the client.
    - name: DOCKER_TLS_CERTDIR
      value: /certs
    volumeMounts:
    - mountPath: /certs/client
      name: dind-certs
    #- name: $(workspaces.cache.volume)
    #  mountPath: /var/lib/docker  #$(workspaces.cache.path)
    # Wait for the dind daemon to generate the certs it will share with the
    # client.
    readinessProbe:
      periodSeconds: 1
      exec:
        command: ['ls', '/certs/client/ca.pem']
  volumes:
  - name: dind-certs
    emptyDir: {}

